/*
 * Copyright (c) 2011, IETR/INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IETR/INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Damien de Saint Jorre
package it.diee.unica.multidec;
import  std.video.Display.*;
import  std.stdio.Source.*;
@xronos_no_generation
actor DisplayYUV()
	uint(size=8) B,
	int(size=16) WIDTH,
	int(size=16) HEIGHT
		==>
		:

	uint(size=8)  pictureBufferY[MAX_WIDTH * MAX_HEIGHT];
	uint(size=8)  pictureBufferU[MAX_WIDTH * MAX_HEIGHT / 4];
	uint(size=8)  pictureBufferV[MAX_WIDTH * MAX_HEIGHT / 4];
	int (size=32) pictureSizeInMb;
	int (size=32) nbBlockGot;
	int (size=32) nbFrameDecoded;
	uint(size=2)  chromaComponent;
	int (size=16) pictureWidthLuma := MAX_WIDTH;
	int (size=16) pictureHeightLuma := MAX_HEIGHT;
	uint(size=12) xIdxLuma;
	uint(size=32) yOffLuma;
	uint(size=12) xIdxChroma;
	uint(size=32) yOffChroma;
	
	// Necessary with backends that do not kill the entire application
	// when calling source_exit()
	bool isTerminated := false;

	initialize ==>
	do
		if ((displayYUV_getFlags() & DISP_ENABLE) != 0) then
			displayYUV_init();
		end
		compareYUV_init();
		fpsPrintInit();
		nbFrameDecoded := 0;
	end

	action ==>
	guard
		not isTerminated,
		source_isMaxLoopsReached() || nbFrameDecoded = displayYUV_getNbFrames()
	do
		isTerminated := true;
		source_exit(0);
	end

	getPictureSize: action
		WIDTH  :[WidthValue],
		HEIGHT :[HeightValue]
			==>
	do
		pictureWidthLuma  := WidthValue  * 16;
		pictureHeightLuma := HeightValue * 16;
		pictureSizeInMb   := WidthValue * HeightValue;
		nbBlockGot := 0;
		xIdxLuma   := 0;
		xIdxChroma := 0;
		yOffLuma   := 0;
		yOffChroma := 0;
	end

	getPixValue.launch.Luma: action B :[Bytes] repeat 256 ==>
	guard
		nbBlockGot < pictureSizeInMb
	var
		uint(size=32) yOff := yOffLuma,
		uint(size=9)  idx  := 0
	do
		nbBlockGot := nbBlockGot + 1;
		foreach int y in 0 .. 15
		do
			foreach int x in xIdxLuma .. xIdxLuma + 15
			do
				pictureBufferY[yOff+x] := Bytes[idx];
				idx := idx + 1;
			end
			yOff := yOff + pictureWidthLuma;
		end
		xIdxLuma := xIdxLuma + MB_SIZE_LUMA;
		chromaComponent := 0;
	end

	getPixValue.launch.Chroma: action B :[Bytes] repeat 64 ==>
	var
		uint(size=32) yOff := yOffChroma,
		uint(size=7)  idx  := 0
	do
		foreach int y in 0 .. 7
		do
			foreach int x in xIdxChroma .. xIdxChroma + 7
			do
				if(chromaComponent=0)then
					pictureBufferU[yOff + x] := Bytes[idx];
				else
					pictureBufferV[yOff + x] := Bytes[idx];
				end
				idx := idx + 1;
			end
			yOff := yOff + pictureWidthLuma / 2;
		end
		if chromaComponent != 0 then
			xIdxChroma := xIdxChroma + MB_SIZE_CHROMA;
			if xIdxLuma = pictureWidthLuma then
				xIdxLuma   := 0;
				xIdxChroma := 0;
				yOffLuma   := yOffLuma + MB_SIZE_LUMA   * pictureWidthLuma;
				yOffChroma := yOffChroma + MB_SIZE_CHROMA * pictureWidthLuma / 2;
			end
		end
		chromaComponent := 1;
	end

	displayPicture: action ==>
	guard
		nbBlockGot >= pictureSizeInMb,
		(displayYUV_getFlags() & DISP_ENABLE) != 0
	do
		fpsPrintNewPicDecoded();
		displayYUV_displayPicture(pictureBufferY, pictureBufferU, pictureBufferV, pictureWidthLuma, pictureHeightLuma);
		compareYUV_comparePicture(pictureBufferY, pictureBufferU, pictureBufferV, pictureWidthLuma, pictureHeightLuma);
		nbFrameDecoded := nbFrameDecoded + 1;
	end
	
	displayDisable: action ==>
	guard
		nbBlockGot >= pictureSizeInMb
	do
		fpsPrintNewPicDecoded();
		compareYUV_comparePicture(pictureBufferY, pictureBufferU, pictureBufferV, pictureWidthLuma, pictureHeightLuma);
		nbFrameDecoded := nbFrameDecoded + 1;
	end

	schedule fsm GetPictureSize:
		GetPictureSize    (getPictureSize            )--> GetLumaBlock;
		GetLumaBlock      (getPixValue.launch.Luma   )--> GetChroma1Block;
		GetChroma1Block   (getPixValue.launch.Chroma )--> GetChroma2Block;
		GetChroma2Block   (getPixValue.launch.Chroma )--> GetLumaBlock;

		GetLumaBlock      (displayPicture            )--> GetPictureSize;
		GetLumaBlock      (displayDisable            )--> GetPictureSize;
	end

	priority
		getPixValue > displayPicture;
		displayPicture > displayDisable;
	end

end